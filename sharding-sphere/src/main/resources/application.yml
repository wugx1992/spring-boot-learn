spring:
  application:
    name: sharding-sphere

#  datasource:
#    driver-class-name: com.mysql.jdbc.Driver
#    url: jdbc:mysql://localhost:3306/sharding_test_0?useUnicode=true&characterEncoding=utf-8
#    username: root
#    password: credittone
#    initial-size: 5 #启动连接池时，初始建立的连接数量
#    max-idle: 5 #连接池最大的空闲连接数量
#    maximum-pool-size: 10 #连接池最大的连接数，包括使用中的和空闲的连接



  shardingsphere:
    datasource:
      names: rw_master,rw_slave0
      rw_master:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/sharding_test_0?useUnicode=true&characterEncoding=utf-8
        username: root
        password: credittone
      rw_slave0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/sharding_test_1?useUnicode=true&characterEncoding=utf-8
        username: root
        password: credittone
    masterslave:
      name: rw
      master-data-source-name: rw_master
      slave-data-source-names: rw_slave0
    props:
      sql:
        show: true
#    sharding:
#      tables:
#        t_order:
#          actual-data-nodes: ds$->{0..1}.t_order$->{0..1}
#          table-strategy:
#            inline:
#              sharding-column: order_id
#              algorithm-expression: t_order$->{order_id % 2}
#          key-generator:
#            column: order_id
#            type: SNOWFLAKE
#      binding-tables: t_order,t_order_item
#      broadcast-tables: t_config
#      default-database-strategy:
#        inline:
#          sharding-column: user_id
#          algorithm-expression: ds$->{user_id % 2}




server:
  port: 8181